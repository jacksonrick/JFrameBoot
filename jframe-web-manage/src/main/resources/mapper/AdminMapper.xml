<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.jf.mapper.AdminMapper">

	<sql id="adminCondition">
		<where>
            <if test="keywords != null and keywords != ''">
                AND (
                    a.login_name = #{keywords} OR
                    a.realname = #{keywords} OR
                    a.phone = #{keywords}
                )
            </if>
            <if test="loginName != null and loginName !=''">AND a.login_name = #{loginName}</if>
            <if test="roleId != null">AND a.role_id = #{roleId}</if>
		</where>
	</sql>

	<sql id="baseColumn">
		a.id,
		a.role_id,
		a.login_name,
		a.realname,
		a.phone,
		a.rights,
		a.create_time,
		a.update_time,
		a.last_login_time,
		a.Last_login_ip,
		a.deleted,
        <include refid="com.jf.mapper.RoleMapper.simpleColumn"/>
	</sql>

	<resultMap type="com.jf.database.model.manage.Admin" id="adminResultMap">
		<id property="id" column="id" />
		<result property="roleId" column="role_id" />
		<result property="loginName" column="login_name" />
		<result property="realname" column="realname" />
		<result property="phone" column="phone" />
		<result property="rights" column="rights" />
		<result property="createTime" column="create_time" />
		<result property="updateTime" column="update_time" />
		<result property="lastLoginTime" column="last_login_time" />
		<result property="lastLoginIp" column="last_login_ip" />
		<result property="deleted" column="deleted" />
		<association property="role" javaType="com.jf.database.model.manage.Role">
			<id property="id" column="role_id" />
			<result property="name" column="name" />
			<result property="flag" column="flag" />
			<result property="deleted" column="role_delete" />
		</association>
	</resultMap>

	<resultMap type="com.jf.database.model.manage.Admin" id="adminRightsResultMap">
		<result property="rights" column="rights" />
		<association property="role" javaType="com.jf.database.model.manage.Role">
			<result property="rights" column="role_rights" />
			<result property="flag" column="flag" />
		</association>
	</resultMap>

	<select id="findByCondition" resultMap="adminResultMap" parameterType="baseVo">
		SELECT <include refid="baseColumn"/>
		FROM s_admin a LEFT JOIN s_role r ON a.role_id = r.id
		<include refid="adminCondition"/>
		<include refid="COMMON.ORDER"/>
	</select>

    <select id="findById" resultMap="adminResultMap" parameterType="int">
        SELECT <include refid="baseColumn"/>
        FROM s_admin a LEFT JOIN s_role r ON a.role_id = r.id
        WHERE a.id = #{id}
    </select>

	<select id="findCountByKey" resultType="int" parameterType="baseVo">
		SELECT COUNT(1)
		FROM s_admin a
        <include refid="adminCondition"/>
	</select>

	<select id="findByNameAndPwd" resultMap="adminResultMap" parameterType="string">
		SELECT <include refid="baseColumn"/>
		FROM s_admin a LEFT JOIN s_role r ON a.role_id = r.id
		WHERE a.login_name = #{loginName} AND a.password = #{password}
	</select>

	<select id="findRightsById" resultMap="adminRightsResultMap" parameterType="int">
		SELECT a.rights, r.rights AS `role_rights`, r.flag
		FROM s_admin a LEFT JOIN s_role r ON a.role_id = r.id
		WHERE a.id = #{id}
	</select>

	<insert id="insert" parameterType="com.jf.database.model.manage.Admin">
		INSERT INTO s_admin (
		  role_id,
		  login_name,
		  realname,
		  password,
		  phone
		)
		VALUES (
		  #{roleId},
		  #{loginName},
		  #{realname},
		  #{password},
		  #{phone}
		)
	</insert>

	<update id="update" parameterType="com.jf.database.model.manage.Admin">
		UPDATE s_admin
		<set>
			<if test="roleId != null">role_id = #{roleId},</if>
			<if test="loginName != null and loginName != ''">login_name = #{loginName},</if>
			<if test="realname != null and realname != ''">realname = #{realname},</if>
			<if test="password != null and password != ''">password = #{password},</if>
			<if test="phone != null and phone != ''">phone = #{phone},</if>
			<if test="rights != null">rights = #{rights},</if>
			<if test="lastLoginTime != null">last_login_time = #{lastLoginTime},</if>
			<if test="lastLoginIp != null and lastLoginIp != ''">last_login_ip = #{lastLoginIp},</if>
			<if test="1 == 1">update_time = NOW(),</if>
		</set>
		WHERE id = #{id}
	</update>

    <update id="delete" parameterType="int">
        UPDATE s_admin SET deleted = !deleted
        WHERE id = #{id}
    </update>
	<!-- For PG: UPDATE s_admin SET deleted = NOT deleted -->

</mapper>